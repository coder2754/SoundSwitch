name: .NET

on:
  push:
    branches: [ dev, master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ dev, master ]
env:
  # Stop wasting time caching packages
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  # Disable sending usage data to Microsoft
  # DOTNET_CLI_TELEMETRY_OPTOUT: true
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PROJECT_NAME: "SoundSwitch"
  ARCH: "win-x64"
  FRAMEWORK: "net6.0-windows"
  NODEJS: 16
  DOTNET: "6.0.x"
  DOTNET_PRERELEASE: true
  CONFIGURATION: "Nightly"
  SENTRY_NAME: "soundswitch"

jobs:
  nightly-release:
    if: github.ref == 'refs/heads/dev' && needs.changes.outputs.ci == 'true'
    outputs:
      devVersion: ${{ steps.devVersion.outputs.version }}
    runs-on: windows-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          all_but_latest: true
          access_token: ${{ github.token }}
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET }}
          include-prerelease: ${{ env.DOTNET_PRERELEASE }}
      - name: Restore
        run: dotnet restore -r ${{ env.ARCH }}
      - name: Fetch tags
        run: git fetch --tags --force
      - name: Calculate version
        id: devVersion
        run: .\devVersion.ps1
      - name: Build pre-release
        run: dotnet publish -c ${{env.CONFIGURATION}} --no-restore -r ${{ env.ARCH }} ${{ env.PROJECT_NAME }}\${{ env.PROJECT_NAME }}.csproj
      - name: print
        run: find ${{ env.PROJECT_NAME }}\bin\ -print
      - name: Set Env var from GitHub
        uses: rlespinasse/github-slug-action@v3.x
      - name: Zip Build ${{env.PROJECT_NAME}}-${{ steps.devVersion.outputs.version }}
        run: tar caf   ${{env.PROJECT_NAME}}-${{ steps.devVersion.outputs.version }}.zip -C ${{ env.PROJECT_NAME }}\bin\${{env.CONFIGURATION}}\${{ env.FRAMEWORK }}\${{ env.ARCH }}\publish\ *
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODEJS}}
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: npm-cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci --prefer-offline --silent --cache npm-cache
      - name: Upload prerelease & Notify
        env:
          UPLOAD_SECRET: ${{secrets.UPLOAD_SECRET}}
          UPLOAD_PUBLIC: ${{secrets.UPLOAD_PUBLIC}}
          UPLOAD_BUCKET: ${{env.PROJECT_NAME}}
        run: node devRelease.js "${{ secrets.DISCORD_WEBHOOK }}" "${{ steps.devVersion.outputs.version }}" "${{env.GITHUB_REPOSITORY_OWNER_PART}}/${{env.GITHUB_REPOSITORY_NAME_PART}}" "${{env.PROJECT_NAME}}-${{ steps.devVersion.outputs.version }}.zip"
